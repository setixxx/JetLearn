[
    {
        "title": "Введение в Jetpack Compose",
        "content": [
            "Jetpack Compose - это современный инструмент для создания пользовательских интерфейсов в Android, основанный на декларативном программировании, выпущенный компанией Google в 2020 году. В отличие от традиционного подхода, где разработчики напрямую манипулировали представлениями, Compose позволяет определить интерфейс как функцию данных. Это упрощает создание и обновление пользовательского интерфейса, повышает производительность и обеспечивает более простой и удобный код.",
            "Основная идея Jetpack Compose заключается в том, что пользовательский интерфейс описывается с помощью композиционных функций, которые создают и объединяют различные компоненты интерфейса. Эти функции являются реактивными, то есть они автоматически перерисовываются при изменении состояния приложения. Compose использует современные концепции программирования, такие как неизменяемые данные и функциональное программирование, что делает код более простым для понимания, тестирования и обслуживания.",
            "Пример простого приложения с Compose:",
            "В этом примере функция Greeting определяет компонент, который отображает текст с приветствием. Функция GreetingApp является точкой входа для приложения и вызывает функцию Greeting. Аннотация @Composable указывает, что эта функция предназначена для создания компонентов пользовательского интерфейса в Compose. Аннотация @Preview позволяет предварительно просматривать компонент в Android Studio во время разработки.",
            "Одним из преимуществ Jetpack Compose является его кроссплатформенность. Он может использоваться не только для создания приложений для Android, но и для разработки приложений для других платформ, таких как настольные компьютеры и веб-приложения. Compose предоставляет богатый набор встроенных компонентов пользовательского интерфейса, таких как текст, кнопки, списки и многое другое. Также существует возможность создавать собственные пользовательские компоненты.",
            "Кроме того, Jetpack Compose тесно интегрирован с другими библиотеками Jetpack, такими как ViewModel и LiveData, что упрощает управление состоянием приложения и обеспечивает согласованный подход к разработке. Compose также поддерживает такие концепции, как темы, анимации и доступность, что позволяет создавать привлекательные и доступные пользовательские интерфейсы.",
            "В целом, Jetpack Compose представляет собой современный и мощный инструмент для создания пользовательских интерфейсов в Android, который упрощает разработку, повышает производительность и обеспечивает более гибкий и выразительный подход к созданию пользовательских интерфейсов."
        ],
        "code_examples": [
            "        @Composable\n        fun Greeting(name: String) {\n            Text(text = \"Hello $name!\")\n        }\n        \n        @Preview\n        @Composable\n        fun DefaultPreview() {\n            GreetingApp()\n        }\n        \n        @Composable\n        fun GreetingApp() {\n            Greeting(name = \"World\")\n        }"
        ]
    },
    {
        "title": "Компоненты Compose и @Composable",
        "content": [
            "В Jetpack Compose пользовательский интерфейс состоит из компонентов, которые определяются с помощью функций, помеченных аннотацией @Composable. Эти функции возвращают объекты, представляющие элементы интерфейса, такие как Text, Button, Image и т.д. Компоненты могут быть вложенными, образуя иерархическую структуру интерфейса. Компоненты являются основными строительными блоками пользовательского интерфейса в Jetpack Compose, и их можно комбинировать для создания сложных и богатых интерфейсов.",
            "Аннотация @Composable играет важную роль в Jetpack Compose. Она указывает компилятору, что функция предназначена для создания компонентов пользовательского интерфейса, и позволяет применять специальную обработку и оптимизации к этим функциям. Функции, помеченные как @Composable, следуют определенным правилам и ограничениям, что обеспечивает их корректную работу и возможность эффективного обновления пользовательского интерфейса.",
            "Пример использования компонентов:",
            "В этом примере функция MyScreen определяет компонент, который содержит текст, кнопку и изображение. Компонент Column используется для вертикального расположения элементов. Внутри Button мы размещаем еще один компонент Text, что демонстрирует вложенность компонентов. Компоненты могут содержать другие компоненты, создавая таким образом сложные иерархии пользовательского интерфейса.",
            "Одним из преимуществ использования компонентов в Jetpack Compose является их переиспользуемость. Разработчики могут создавать собственные компоненты, инкапсулируя в них определенную функциональность или внешний вид, и использовать их в разных частях приложения. Это способствует модульности, поддерживаемости кода и позволяет создавать согласованные и унифицированные пользовательские интерфейсы.",
            "Кроме того, Jetpack Compose предоставляет богатый набор встроенных компонентов, таких как Text, Button, Image, LazyColumn (для создания списков), Box (для позиционирования элементов) и многих других. Эти компоненты можно использовать непосредственно или создавать на их основе собственные пользовательские компоненты. Таким образом, Jetpack Compose предлагает гибкий и мощный инструментарий для создания привлекательных и функциональных пользовательских интерфейсов."
        ],
        "code_examples": [
            "@Composable\nfun MyScreen() {\n    Column {\n        Text(\"Hello Compose\")\n        Button(onClick = {/* ... */ }) {\n            Text(\"Click me\")\n        }\n        Image(\n            painter = painterResource(id = R.drawable.my_image),\n            contentDescription = \"My Image\"\n        )\n    }\n}\n"
        ]
    },
    {
        "title": "Состояние и перерисовка",
        "content": [
            "Одним из ключевых понятий в Compose является состояние (state). Состояние - это данные, которые могут изменяться и влиять на отображение компонентов. Когда состояние меняется, Compose автоматически перерисовывает только те компоненты, которые были затронуты изменением, обеспечивая высокую производительность и эффективность. Правильное управление состоянием является важной частью разработки приложений с использованием Jetpack Compose.",
            "В Compose состояние может быть представлено различными типами данных, такими как State, MutableState, StateFlow и MutableStateFlow. Эти типы предоставляют различные способы управления состоянием и его изменениями. State представляет неизменяемое состояние, а MutableState - изменяемое. StateFlow и MutableStateFlow являются частью библиотеки Kotlin Coroutines и позволяют управлять состоянием с использованием концепции потоков данных.",
            "Пример использования состояния:",
            "В этом примере переменная count представляет состояние счетчика. Когда пользователь нажимает на кнопку \"Increment\", значение count увеличивается, а при нажатии на \"Decrement\" - уменьшается. Компонент Text автоматически обновляется, отображая новое значение счетчика. Изменение состояния происходит внутри функции Counter, помеченной аннотацией @Composable.",
            "Важно отметить, что изменение состояния должно происходить только внутри функций, помеченных аннотацией @Composable. Это обеспечивает правильную перерисовку компонентов и сохранение состояния при повторной композиции. Попытка изменить состояние вне @Composable функций может привести к ошибкам и непредсказуемому поведению.",
            "Помимо обычного состояния, в Compose также есть концепция \"помнящего\" состояния (remembered state), которое позволяет сохранять значения между перерисовками компонентов. Это достигается с помощью функции remember. \"Помнящее\" состояние полезно в случаях, когда необходимо сохранить объекты или значения, которые должны оставаться неизменными во время жизненного цикла компонента, например, при инициализации ресурсов или объектов, требующих длительных вычислений.",
            "Правильное управление состоянием является критически важным аспектом разработки приложений с помощью Jetpack Compose. Compose предоставляет различные инструменты и концепции для управления состоянием, такие как State, MutableState, StateFlow, MutableStateFlow и \"помнящее\" состояние. Выбор подходящего подхода зависит от конкретных потребностей приложения и сложности управления состоянием."
        ],
        "code_examples": [
            "@Composable\nfun Counter() {\n    var count by remember { mutableStateOf(0) }\n\n    Column {\n        Text(\"Count: $count\")\n        Button(onClick = { count++ }) {\n            Text(\"Increment\")\n        }\n        Button(onClick = { count-- }) {\n            Text(\"Decrement\")\n        }\n    }\n}\n"
        ]
    },
    {
        "title": "Модификаторы и стили",
        "content": [
            "Модификаторы в Compose позволяют настраивать внешний вид и поведение компонентов. Они могут изменять размер, отступы, цвета, шрифты, добавлять события нажатия или жестов, и многое другое. Модификаторы применяются к компонентам через параметр modifier и предоставляют гибкий и мощный способ стилизации элементов пользовательского интерфейса.",
            "Compose предоставляет богатый набор предопределенных модификаторов, которые можно комбинировать друг с другом для достижения желаемого результата. Среди них есть модификаторы для изменения размера (size, width, height), отступов (padding), фоновых цветов (background), границ (border), теней (shadow), обработки нажатий (clickable) и жестов (draggable, scrollable), а также многие другие. Также можно создавать собственные модификаторы для инкапсуляции часто используемых стилей или поведения.",
            "Пример использования модификаторов:",
            "В этом примере мы применяем несколько модификаторов к компоненту Text: добавляем отступ, устанавливаем фоновый цвет желтый, делаем текст кликабельным, и добавляем границу черного цвета с закругленными углами. Модификаторы можно комбинировать в нужном порядке для достижения желаемого визуального эффекта и поведения.",
            "Модификаторы могут быть применены не только к отдельным компонентам, но и к их контейнерам, таким как Box, Column или Row. Это позволяет применять стили ко всем дочерним элементам внутри контейнера, создавая согласованный и унифицированный внешний вид.",
            "В этом примере мы применяем модификаторы к Row, задавая серый фоновый цвет и отступы. Все три Text компонента внутри Row автоматически наследуют эти стили, что упрощает создание согласованных интерфейсов.",
            "Модификаторы также могут быть вложенными и комбинированными для создания более сложных стилей и поведения. Например, можно создать модификатор clickableWithRipple, который добавляет не только обработчик нажатия, но и эффект \"волны\" при клике. Этот модификатор может быть создан путем комбинирования существующих модификаторов clickable и rippleEffect.",
            "Благодаря гибкости и выразительности модификаторов в Jetpack Compose, разработчики могут легко создавать привлекательные и интерактивные пользовательские интерфейсы, соответствующие современным принципам дизайна и требованиям пользователей. Модификаторы являются ключевым инструментом для стилизации компонентов и обеспечения согласованного внешнего вида приложения."
        ],
        "code_examples": [
            "@Composable\nfun StyledText() {\n    Text(\n        text = \"Hello Compose\",\n        modifier = Modifier\n            .padding(16.dp)\n            .background(color = Color.Yellow)\n            .clickable {/* ... */ }\n            .border(\n                width = 2.dp,\n                color = Color.Black,\n                shape = RoundedCornerShape(8.dp)\n            )\n    )\n}\n",
            "@Composable\nfun StyledContainer() {\n    Row(\n        modifier = Modifier\n            .background(color = Color.LightGray)\n            .padding(16.dp)\n    ) {\n        Text(\"Item 1\")\n        Text(\"Item 2\")\n        Text(\"Item 3\")\n    }\n}\n"
        ]
    },
    {
        "title": "Макеты и расположение",
        "content": [
            "Compose предоставляет различные компоненты для создания макетов и расположения элементов. Наиболее часто используемые макеты - это Column (для вертикального расположения), Row (для горизонтального расположения) и Box (для наложения элементов друг на друга). Эти контейнеры компоновки являются фундаментальными строительными блоками для создания пользовательских интерфейсов в Jetpack Compose.",
            "Column и Row используются для организации элементов в линейном порядке, вертикальном и горизонтальном соответственно. Они позволяют настраивать выравнивание, отступы и пространство между дочерними элементами. Box, с другой стороны, предназначен для позиционирования элементов друг над другом, а также для создания слоев и наложения компонентов.",
            "Эти компоненты могут быть вложенными, создавая сложные иерархии и структуры интерфейса. Например, Column может содержать вложенные Row, что позволяет создавать сетки и более сложные раскладки. Также они поддерживают модификаторы для настройки размеров, отступов, выравнивания и других свойств, обеспечивая гибкость и точный контроль над внешним видом интерфейса.",
            "Пример использования макетов:",
            "В этом примере мы используем Box для заполнения всего доступного пространства и центрирования содержимого. Внутри Box находится Column, в которой мы размещаем элементы в вертикальном порядке. Компонент Text с текстом \"Header\" имеет отступ снизу, а \"Footer\" - отступ сверху. Внутри Column есть Row для горизонтального расположения элементов \"Item 1\" и \"Item 2\", причем между ними также есть отступ.",
            "Кроме стандартных макетов, Compose предоставляет и другие полезные компоненты для создания сложных раскладок, такие как ConstraintLayout (для создания макетов с ограничениями), Scaffold (для создания приложений с выдвижными панелями и нижними навигационными панелями) и Surface (для создания материальных поверхностей с тенями и закругленными углами).",
            "Контейнеры компоновки в Jetpack Compose обеспечивают мощные и гибкие возможности для организации элементов пользовательского интерфейса. Они позволяют создавать сложные и адаптивные раскладки, соответствующие принципам материального дизайна и требованиям пользователей. Правильное использование контейнеров компоновки в сочетании с модификаторами и другими функциями Compose обеспечивает создание привлекательных и функциональных пользовательских интерфейсов для Android-приложений"
        ],
        "code_examples": [
            "@Composable\nfun MyLayout() {\n    Box(\n        modifier = Modifier\n            .fillMaxSize()\n            .background(color = Color.White),\n        contentAlignment = Alignment.Center\n    ) {\n        Column(\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            Text(\n                text = \"Header\",\n                modifier = Modifier.padding(bottom = 16.dp)\n            )\n            Row {\n                Text(\"Item 1\", modifier = Modifier.padding(end = 8.dp))\n                Text(\"Item 2\")\n            }\n            Text(\n                text = \"Footer\",\n                modifier = Modifier.padding(top = 16.dp)\n            )\n        }\n    }\n}\n"
        ]
    },
    {
        "title": "Списки и отображение данных",
        "content": [
            "Compose предоставляет компоненты LazyColumn и LazyRow для отображения списков данных. Эти компоненты позволяют эффективно работать с большими наборами данных, загружая и отображая только видимые элементы. Это обеспечивает высокую производительность и плавную прокрутку списков, даже при работе с огромными наборами данных.",
            "Компоненты LazyColumn и LazyRow принимают список данных и функцию, которая определяет, как каждый элемент данных должен быть отображен в виде компонента Compose. Эта функция называется \"scope function\" и предоставляет различные методы для работы с элементами списка, такие как items, itemsIndexed, itemsIndexedKeyed и другие.",
            "Пример использования LazyColumn:",
            "В этом примере мы передаем список строк в компонент MyList, а LazyColumn отображает каждый элемент списка как компонент Text. Каждый Text имеет фоновый цвет светло-серый и отступы по краям. Метод items используется для указания списка элементов и функции отображения каждого элемента.",
            "Помимо простых списков, LazyColumn и LazyRow также поддерживают более сложные сценарии, такие как группировка элементов, добавление заголовков и разделителей, а также отображение различных типов элементов в одном списке. Для этого можно использовать другие методы, такие как itemsIndexed (для доступа к индексам элементов) и itemsIndexedKeyed (для уникальной идентификации элементов).",
            "В этом примере мы имеем список элементов различных типов: заголовков, текста и изображений. Функция, передаваемая в items, использует оператор when для определения типа элемента и отображения соответствующего компонента.",
            "Также LazyColumn и LazyRow поддерживают возможность добавления разделителей между элементами с помощью метода itemSpacer, stickyHeader для создания \"залипающих\" заголовков, а также различные модификаторы для настройки внешнего вида и поведения списка.",
            "Компоненты LazyColumn и LazyRow являются мощными инструментами для работы со списками данных в Jetpack Compose. Они обеспечивают высокую производительность, гибкость и богатые возможности для создания сложных и адаптивных списков, что делает их незаменимыми при разработке современных пользовательских интерфейсов для Android-приложений."
        ],
        "code_examples": [
            "@Composable\nfun MyList(items: List<String>) {\n    LazyColumn {\n        items(items) { item ->\n            Text(\n                text = item,\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .padding(16.dp)\n                    .background(color = Color.LightGray)\n            )\n        }\n    }\n}\n",
            "@Composable\nfun GroupedList(items: List<Item>) {\n    LazyColumn {\n        items(items) { item ->\n            when (item) {\n                is HeaderItem -> HeaderComponent(item.title)\n                is TextItem -> TextComponent(item.text)\n                is ImageItem -> ImageComponent(item.imageRes)\n            }\n        }\n    }\n}\n"
        ]
    },
    {
        "title": "Изображения и ресурсы в Compose",
        "content": [
            "В Jetpack Compose есть специальный компонент Image для отображения изображений. Он поддерживает различные источники изображений, такие как ресурсы, файлы, URL-адреса и bitmap-данные. Также Image предоставляет множество полезных параметров для настройки размера, масштабирования, кэширования и других аспектов.",
            "Пример использования Image для отображения ресурса:",
            "В этом примере мы загружаем изображение из ресурса приложения с помощью painterResource. Компонент Image отображает это изображение с размером 200dp и с закругленными углами радиусом 8dp.",
            "Помимо ресурсов, Compose также поддерживает отображение изображений из файлов и URL-адресов:",
            "В этих примерах мы загружаем изображения из файла и из URL-адреса соответственно.",
            "Для более сложных сценариев, таких как кэширование, трансформации и анимации изображений, Compose предлагает дополнительные библиотеки и инструменты, такие как Coil, Glide и другие.",
            "Кроме изображений, в Compose также можно использовать другие типы ресурсов, такие как строки, цвета, стили и т.д. Доступ к ним осуществляется через соответствующие функции и классы Android SDK.",
            "Важно помнить, что компонент Image требует задания contentDescription для обеспечения доступности приложения для людей с ограниченными возможностями.",
            "Помимо отображения изображений, Compose также позволяет создавать и рисовать собственные векторные графические компоненты с помощью функций рисования низкого уровня. Это открывает возможности для создания сложных и анимированных графических элементов пользовательского интерфейса."
        ],
        "code_examples": [
            "@Composable\nfun MyImageScreen() {\n    Image(\n        painter = painterResource(id = R.drawable.my_image),\n        contentDescription = \"My Image\",\n        modifier = Modifier\n            .size(200.dp)\n            .clip(RoundedCornerShape(8.dp))\n    )\n}\n",
            "@Composable\nfun ImageFromFile() {\n    val imageFile = File(\"path/to/image.jpg\")\n    Image(\n        painter = BitmapPainter(imageFile.inputStream()),\n        contentDescription = \"Image from file\"\n    )\n}\n\n@Composable\nfun ImageFromUrl() {\n    val imageUrl = \"https://example.com/image.png\"\n    Image(\n        painter = rememberAsyncImagePainter(imageUrl),\n        contentDescription = \"Image from URL\"\n    )\n}\n"
        ]
    },
    {
        "title": "Тема оформления и Material Design",
        "content": [
            "Jetpack Compose тесно интегрирован с Material Design - руководством по созданию визуальных, интерактивных и адаптивных интерфейсов от Google. Compose предоставляет множество готовых компонентов, следующих принципам Material Design, таких как Button, TextField, Checkbox, BottomNavigation, Scaffold и многие другие. Эти компоненты обеспечивают соответствие рекомендациям Google по дизайну, а также предоставляют богатые возможности для настройки и адаптации под требования конкретного приложения.",
            "Для создания согласованного визуального стиля приложения в Compose используются темы оформления. Тема определяет цвета, типографику, формы, тени и другие аспекты стиля, которые будут применяться ко всем компонентам в приложении. Использование тем обеспечивает единообразие и согласованность внешнего вида приложения, а также упрощает процесс внесения изменений в стиль, поскольку достаточно изменить настройки темы, и эти изменения будут отражены во всем приложении.",
            "Пример создания и использования темы:",
            "В этом примере мы определяем цвета, типографику и формы для нашей темы оформления. Затем мы используем композицию MaterialTheme, чтобы применить эту тему ко всему приложению. Внутри MaterialTheme мы размещаем компонент Scaffold, который представляет собой основную раскладку материального дизайна с областью для основного содержимого, верхней панелью (AppBar) и нижней навигационной панелью.",
            "Помимо использования предопределенных тем, таких как darkColors и lightColors, в Compose также можно создавать собственные темы оформления и расширять существующие темы, добавляя новые стили и компоненты. Это обеспечивает высокую гибкость и возможность создания уникальных и выразительных пользовательских интерфейсов, отвечающих требованиям бренда и дизайнерских концепций.",
            "Благодаря тесной интеграции с Material Design, Compose обеспечивает создание привлекательных и удобных пользовательских интерфейсов, следующих рекомендациям Google по дизайну. Использование тем оформления упрощает процесс создания согласованного визуального стиля и обеспечивает легкость внесения изменений в стиль приложения. Таким образом, Jetpack Compose предоставляет мощный инструментарий для создания современных и высококачественных пользовательских интерфейсов для Android-приложений."
        ],
        "code_examples": [
            "val colors = darkColors(\n    primary = Purple200,\n    primaryVariant = Purple700,\n    secondary = Teal200\n)\n\nval typography = Typography(\n    body1 = TextStyle(\n        fontFamily = FontFamily.Default,\n        fontWeight = FontWeight.Normal,\n        fontSize = 16.sp\n    )\n)\n\nval shapes = Shapes(\n    small = RoundedCornerShape(4.dp),\n    medium = RoundedCornerShape(8.dp),\n    large = RoundedCornerShape(16.dp)\n)\n\n@Composable\nfun MyApp() {\n    MaterialTheme(\n        colors = colors,\n        typography = typography,\n        shapes = shapes\n    ) {\n        Scaffold {\n            MyScreen()\n        }\n    }\n}\n"
        ]
    }
]